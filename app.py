from flask import Flask
from models import db, ma
from routes import register_routes
from werkzeug.security import generate_password_hash
from flask_jwt_extended import JWTManager

app = Flask(__name__)

# Configure the DB
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'

# Configure JWT -> The secret key generated by using os.urandom()
app.config['JWT_SECRET_KEY'] = b'f]\x7fl\xb7\xf0\x92\xd1f\x00)"~0\xbb|5\x13h2+\x9c]<\xd84\xde4\xf9S\x03\x16'
jwt = JWTManager(app)

db.init_app(app)
ma.init_app(app)


register_routes(app)


def seed_data():
    """ This function seeds initial data into the database."""
    from models.user import User  # Import here to avoid circular import issues
    admin_hashed_password = generate_password_hash("Omar123#", method='pbkdf2:sha256')
    user_hashed_password = generate_password_hash("Ali321@", method='pbkdf2:sha256')

    if not User.query.filter_by(email="Omar12.amjad@gmail.com").first():
        admin = User(user_name="Omar Amjad", email="Omar12.amjad@gmail.com", role='admin', password_hash=admin_hashed_password)
        db.session.add(admin)

    if not User.query.filter_by(email="Ali.kareem@gmail.com").first():
        user1 = User(user_name="Ali Kareem", email="Ali.kareem@gmail.com", role='customer', password_hash=user_hashed_password)
        db.session.add(user1)

    db.session.commit()


def create_tables():
    """This function creates tables all the database tables."""
    with app.app_context():
        db.create_all()


if __name__ == '__main__':
    with app.app_context():
        create_tables()
        seed_data()
    app.run(debug=True)
